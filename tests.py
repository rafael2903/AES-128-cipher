import unittest

from main import Mode, bytes_to_hex_string, encrypt, expand_key, decrypt


class Test(unittest.TestCase):

    key = bytes([0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6,
           0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c])

    expanded_key = [
        0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c,
        0xa0, 0xfa, 0xfe, 0x17, 0x88, 0x54, 0x2c, 0xb1, 0x23, 0xa3, 0x39, 0x39, 0x2a, 0x6c, 0x76, 0x05,
        0xf2, 0xc2, 0x95, 0xf2, 0x7a, 0x96, 0xb9, 0x43, 0x59, 0x35, 0x80, 0x7a, 0x73, 0x59, 0xf6, 0x7f,
        0x3d, 0x80, 0x47, 0x7d, 0x47, 0x16, 0xfe, 0x3e, 0x1e, 0x23, 0x7e, 0x44, 0x6d, 0x7a, 0x88, 0x3b,
        0xef, 0x44, 0xa5, 0x41, 0xa8, 0x52, 0x5b, 0x7f, 0xb6, 0x71, 0x25, 0x3b, 0xdb, 0x0b, 0xad, 0x00,
        0xd4, 0xd1, 0xc6, 0xf8, 0x7c, 0x83, 0x9d, 0x87, 0xca, 0xf2, 0xb8, 0xbc, 0x11, 0xf9, 0x15, 0xbc,
        0x6d, 0x88, 0xa3, 0x7a, 0x11, 0x0b, 0x3e, 0xfd, 0xdb, 0xf9, 0x86, 0x41, 0xca, 0x00, 0x93, 0xfd,
        0x4e, 0x54, 0xf7, 0x0e, 0x5f, 0x5f, 0xc9, 0xf3, 0x84, 0xa6, 0x4f, 0xb2, 0x4e, 0xa6, 0xdc, 0x4f,
        0xea, 0xd2, 0x73, 0x21, 0xb5, 0x8d, 0xba, 0xd2, 0x31, 0x2b, 0xf5, 0x60, 0x7f, 0x8d, 0x29, 0x2f,
        0xac, 0x77, 0x66, 0xf3, 0x19, 0xfa, 0xdc, 0x21, 0x28, 0xd1, 0x29, 0x41, 0x57, 0x5c, 0x00, 0x6e,
        0xd0, 0x14, 0xf9, 0xa8, 0xc9, 0xee, 0x25, 0x89, 0xe1, 0x3f, 0x0c, 0xc8, 0xb6, 0x63, 0x0c, 0xa6,
    ]

    plain_text = bytes([0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66,
                  0x77, 0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff])

    encrypted_text_1_round = '2b6f37256cfbb4d1236ebf33c512a1c33b6e050638bec2b6bbe7059819df5f2c'
    encrypted_text_3_rounds = '6d907fdba181755864be2a35037f426f96acaed276c8c39408b8e85d7a85cbe2'
    encrypted_text_11_rounds = '8df4e9aac5c7573a27d8d055d6e4d64ba254be88e037ddd9d79fb6411c3f9df8'
    encrypted_text_11_rounds_ctr = '7de6493f5eedffc4b6db5afc75c6ba9047026d5024a1aeafbee476a9d7627fd6'


    def test_key_expansion(self):
        expanded_key = expand_key(self.key, 11)
        self.assertEqual(expanded_key, self.expanded_key)

    def test_1_round_encryption(self):
        encrypted_text = encrypt(self.plain_text, self.key, rounds=1)
        self.assertEqual(bytes_to_hex_string(encrypted_text),
                         self.encrypted_text_1_round)

    def test_3_rounds_encryption(self):
        encrypted_text = encrypt(self.plain_text, self.key, rounds=3)
        self.assertEqual(bytes_to_hex_string(encrypted_text), self.encrypted_text_3_rounds)

    def test_11_rounds_encryption(self):
        encrypted_text = encrypt(self.plain_text, self.key)
        self.assertEqual(bytes_to_hex_string(encrypted_text), self.encrypted_text_11_rounds)

    def test_11_rounds_ctr_encryption(self):
        encrypted_text = encrypt(self.plain_text, self.key, Mode.CTR, bytes([0x00]*16))
        self.assertEqual(bytes_to_hex_string(encrypted_text), self.encrypted_text_11_rounds_ctr)

    def test_decryption(self):
        encrypted_text = encrypt(self.plain_text, self.key, Mode.CTR, bytes([0x00]*16), rounds=15)
        decrypted_text = decrypt(encrypted_text, self.key, Mode.CTR, bytes([0x00]*16), rounds=15)
        self.assertEqual(bytes_to_hex_string(decrypted_text), bytes_to_hex_string(self.plain_text))

if __name__ == '__main__':
    unittest.main()
