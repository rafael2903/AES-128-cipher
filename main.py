import logging
from argparse import ArgumentParser
from enum import Enum


class Mode(Enum):
    ECB = 'ECB'
    CTR = 'CTR'


s_box = (
    0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76,
    0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0,
    0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15,
    0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75,
    0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84,
    0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF,
    0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8,
    0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2,
    0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73,
    0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB,
    0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79,
    0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08,
    0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A,
    0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E,
    0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF,
    0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16
)

inv_s_box = (
    0x52, 0x09, 0x6A, 0xD5, 0x30, 0x36, 0xA5, 0x38, 0xBF, 0x40, 0xA3, 0x9E, 0x81, 0xF3, 0xD7, 0xFB,
    0x7C, 0xE3, 0x39, 0x82, 0x9B, 0x2F, 0xFF, 0x87, 0x34, 0x8E, 0x43, 0x44, 0xC4, 0xDE, 0xE9, 0xCB,
    0x54, 0x7B, 0x94, 0x32, 0xA6, 0xC2, 0x23, 0x3D, 0xEE, 0x4C, 0x95, 0x0B, 0x42, 0xFA, 0xC3, 0x4E,
    0x08, 0x2E, 0xA1, 0x66, 0x28, 0xD9, 0x24, 0xB2, 0x76, 0x5B, 0xA2, 0x49, 0x6D, 0x8B, 0xD1, 0x25,
    0x72, 0xF8, 0xF6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xD4, 0xA4, 0x5C, 0xCC, 0x5D, 0x65, 0xB6, 0x92,
    0x6C, 0x70, 0x48, 0x50, 0xFD, 0xED, 0xB9, 0xDA, 0x5E, 0x15, 0x46, 0x57, 0xA7, 0x8D, 0x9D, 0x84,
    0x90, 0xD8, 0xAB, 0x00, 0x8C, 0xBC, 0xD3, 0x0A, 0xF7, 0xE4, 0x58, 0x05, 0xB8, 0xB3, 0x45, 0x06,
    0xD0, 0x2C, 0x1E, 0x8F, 0xCA, 0x3F, 0x0F, 0x02, 0xC1, 0xAF, 0xBD, 0x03, 0x01, 0x13, 0x8A, 0x6B,
    0x3A, 0x91, 0x11, 0x41, 0x4F, 0x67, 0xDC, 0xEA, 0x97, 0xF2, 0xCF, 0xCE, 0xF0, 0xB4, 0xE6, 0x73,
    0x96, 0xAC, 0x74, 0x22, 0xE7, 0xAD, 0x35, 0x85, 0xE2, 0xF9, 0x37, 0xE8, 0x1C, 0x75, 0xDF, 0x6E,
    0x47, 0xF1, 0x1A, 0x71, 0x1D, 0x29, 0xC5, 0x89, 0x6F, 0xB7, 0x62, 0x0E, 0xAA, 0x18, 0xBE, 0x1B,
    0xFC, 0x56, 0x3E, 0x4B, 0xC6, 0xD2, 0x79, 0x20, 0x9A, 0xDB, 0xC0, 0xFE, 0x78, 0xCD, 0x5A, 0xF4,
    0x1F, 0xDD, 0xA8, 0x33, 0x88, 0x07, 0xC7, 0x31, 0xB1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xEC, 0x5F,
    0x60, 0x51, 0x7F, 0xA9, 0x19, 0xB5, 0x4A, 0x0D, 0x2D, 0xE5, 0x7A, 0x9F, 0x93, 0xC9, 0x9C, 0xEF,
    0xA0, 0xE0, 0x3B, 0x4D, 0xAE, 0x2A, 0xF5, 0xB0, 0xC8, 0xEB, 0xBB, 0x3C, 0x83, 0x53, 0x99, 0x61,
    0x17, 0x2B, 0x04, 0x7E, 0xBA, 0x77, 0xD6, 0x26, 0xE1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0C, 0x7D
)

mix_columns_matrix = (
    (0x02, 0x03, 0x01, 0x01),
    (0x01, 0x02, 0x03, 0x01),
    (0x01, 0x01, 0x02, 0x03),
    (0x03, 0x01, 0x01, 0x02)
)

inv_mix_columns_matrix = (
    (0x0E, 0x0B, 0x0D, 0x09),
    (0x09, 0x0E, 0x0B, 0x0D),
    (0x0D, 0x09, 0x0E, 0x0B),
    (0x0B, 0x0D, 0x09, 0x0E)
)

r_con = (
    0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a,
    0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39,
    0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a,
    0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8,
    0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef,
    0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc,
    0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b,
    0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3,
    0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94,
    0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20,
    0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35,
    0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f,
    0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04,
    0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63,
    0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd,
    0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d
)


E = (
    0x01, 0x03, 0x05, 0x0F, 0x11, 0x33, 0x55, 0xFF, 0x1A, 0x2E, 0x72, 0x96, 0xA1, 0xF8, 0x13, 0x35,
    0x5F, 0xE1, 0x38, 0x48, 0xD8, 0x73, 0x95, 0xA4, 0xF7, 0x02, 0x06, 0x0A, 0x1E, 0x22, 0x66, 0xAA,
    0xE5, 0x34, 0x5C, 0xE4, 0x37, 0x59, 0xEB, 0x26, 0x6A, 0xBE, 0xD9, 0x70, 0x90, 0xAB, 0xE6, 0x31,
    0x53, 0xF5, 0x04, 0x0C, 0x14, 0x3C, 0x44, 0xCC, 0x4F, 0xD1, 0x68, 0xB8, 0xD3, 0x6E, 0xB2, 0xCD,
    0x4C, 0xD4, 0x67, 0xA9, 0xE0, 0x3B, 0x4D, 0xD7, 0x62, 0xA6, 0xF1, 0x08, 0x18, 0x28, 0x78, 0x88,
    0x83, 0x9E, 0xB9, 0xD0, 0x6B, 0xBD, 0xDC, 0x7F, 0x81, 0x98, 0xB3, 0xCE, 0x49, 0xDB, 0x76, 0x9A,
    0xB5, 0xC4, 0x57, 0xF9, 0x10, 0x30, 0x50, 0xF0, 0x0B, 0x1D, 0x27, 0x69, 0xBB, 0xD6, 0x61, 0xA3,
    0xFE, 0x19, 0x2B, 0x7D, 0x87, 0x92, 0xAD, 0xEC, 0x2F, 0x71, 0x93, 0xAE, 0xE9, 0x20, 0x60, 0xA0,
    0xFB, 0x16, 0x3A, 0x4E, 0xD2, 0x6D, 0xB7, 0xC2, 0x5D, 0xE7, 0x32, 0x56, 0xFA, 0x15, 0x3F, 0x41,
    0xC3, 0x5E, 0xE2, 0x3D, 0x47, 0xC9, 0x40, 0xC0, 0x5B, 0xED, 0x2C, 0x74, 0x9C, 0xBF, 0xDA, 0x75,
    0x9F, 0xBA, 0xD5, 0x64, 0xAC, 0xEF, 0x2A, 0x7E, 0x82, 0x9D, 0xBC, 0xDF, 0x7A, 0x8E, 0x89, 0x80,
    0x9B, 0xB6, 0xC1, 0x58, 0xE8, 0x23, 0x65, 0xAF, 0xEA, 0x25, 0x6F, 0xB1, 0xC8, 0x43, 0xC5, 0x54,
    0xFC, 0x1F, 0x21, 0x63, 0xA5, 0xF4, 0x07, 0x09, 0x1B, 0x2D, 0x77, 0x99, 0xB0, 0xCB, 0x46, 0xCA,
    0x45, 0xCF, 0x4A, 0xDE, 0x79, 0x8B, 0x86, 0x91, 0xA8, 0xE3, 0x3E, 0x42, 0xC6, 0x51, 0xF3, 0x0E,
    0x12, 0x36, 0x5A, 0xEE, 0x29, 0x7B, 0x8D, 0x8C, 0x8F, 0x8A, 0x85, 0x94, 0xA7, 0xF2, 0x0D, 0x17,
    0x39, 0x4B, 0xDD, 0x7C, 0x84, 0x97, 0xA2, 0xFD, 0x1C, 0x24, 0x6C, 0xB4, 0xC7, 0x52, 0xF6, 0x01
)

L = (
    -1, 0x00, 0x19, 0x01, 0x32, 0x02, 0x1A, 0xC6, 0x4B, 0xC7, 0x1B, 0x68, 0x33, 0xEE, 0xDF, 0x03,
    0x64, 0x04, 0xE0, 0x0E, 0x34, 0x8D, 0x81, 0xEF, 0x4C, 0x71, 0x08, 0xC8, 0xF8, 0x69, 0x1C, 0xC1,
    0x7D, 0xC2, 0x1D, 0xB5, 0xF9, 0xB9, 0x27, 0x6A, 0x4D, 0xE4, 0xA6, 0x72, 0x9A, 0xC9, 0x09, 0x78,
    0x65, 0x2F, 0x8A, 0x05, 0x21, 0x0F, 0xE1, 0x24, 0x12, 0xF0, 0x82, 0x45, 0x35, 0x93, 0xDA, 0x8E,
    0x96, 0x8F, 0xDB, 0xBD, 0x36, 0xD0, 0xCE, 0x94, 0x13, 0x5C, 0xD2, 0xF1, 0x40, 0x46, 0x83, 0x38,
    0x66, 0xDD, 0xFD, 0x30, 0xBF, 0x06, 0x8B, 0x62, 0xB3, 0x25, 0xE2, 0x98, 0x22, 0x88, 0x91, 0x10,
    0x7E, 0x6E, 0x48, 0xC3, 0xA3, 0xB6, 0x1E, 0x42, 0x3A, 0x6B, 0x28, 0x54, 0xFA, 0x85, 0x3D, 0xBA,
    0x2B, 0x79, 0x0A, 0x15, 0x9B, 0x9F, 0x5E, 0xCA, 0x4E, 0xD4, 0xAC, 0xE5, 0xF3, 0x73, 0xA7, 0x57,
    0xAF, 0x58, 0xA8, 0x50, 0xF4, 0xEA, 0xD6, 0x74, 0x4F, 0xAE, 0xE9, 0xD5, 0xE7, 0xE6, 0xAD, 0xE8,
    0x2C, 0xD7, 0x75, 0x7A, 0xEB, 0x16, 0x0B, 0xF5, 0x59, 0xCB, 0x5F, 0xB0, 0x9C, 0xA9, 0x51, 0xA0,
    0x7F, 0x0C, 0xF6, 0x6F, 0x17, 0xC4, 0x49, 0xEC, 0xD8, 0x43, 0x1F, 0x2D, 0xA4, 0x76, 0x7B, 0xB7,
    0xCC, 0xBB, 0x3E, 0x5A, 0xFB, 0x60, 0xB1, 0x86, 0x3B, 0x52, 0xA1, 0x6C, 0xAA, 0x55, 0x29, 0x9D,
    0x97, 0xB2, 0x87, 0x90, 0x61, 0xBE, 0xDC, 0xFC, 0xBC, 0x95, 0xCF, 0xCD, 0x37, 0x3F, 0x5B, 0xD1,
    0x53, 0x39, 0x84, 0x3C, 0x41, 0xA2, 0x6D, 0x47, 0x14, 0x2A, 0x9E, 0x5D, 0x56, 0xF2, 0xD3, 0xAB,
    0x44, 0x11, 0x92, 0xD9, 0x23, 0x20, 0x2E, 0x89, 0xB4, 0x7C, 0xB8, 0x26, 0x77, 0x99, 0xE3, 0xA5,
    0x67, 0x4A, 0xED, 0xDE, 0xC5, 0x31, 0xFE, 0x18, 0x0D, 0x63, 0x8C, 0x80, 0xC0, 0xF7, 0x70, 0x07
)


def add_round_key(state, round_key):
    return [state[i] ^ round_key[i] for i in range(16)]


def shift_rows(state):
    return [
        state[0], state[5], state[10], state[15],
        state[4], state[9], state[14], state[3],
        state[8], state[13], state[2], state[7],
        state[12], state[1], state[6], state[11]
    ]


def inv_shift_rows(state):
    return [
        state[0], state[13], state[10], state[7],
        state[4], state[1], state[14], state[11],
        state[8], state[5], state[2], state[15],
        state[12], state[9], state[6], state[3]
    ]


def g_mul(a, b):
    if a == 0 or b == 0:
        return 0
    if a == 1 or b == 1:
        return a * b

    return E[(L[a] + L[b]) % 0xff]


def mix_columns(state, matrix):
    for i in range(4):
        column = state[i * 4: i * 4 + 4]
        state[i * 4] = g_mul(matrix[0][0], column[0]) ^ g_mul(matrix[0][1], column[1]
                                                              ) ^ g_mul(matrix[0][2], column[2]) ^ g_mul(matrix[0][3], column[3])
        state[i * 4 + 1] = g_mul(matrix[1][0], column[0]) ^ g_mul(matrix[1][1],
                                                                  column[1]) ^ g_mul(matrix[1][2], column[2]) ^ g_mul(matrix[1][3], column[3])
        state[i * 4 + 2] = g_mul(matrix[2][0], column[0]) ^ g_mul(matrix[2][1],
                                                                  column[1]) ^ g_mul(matrix[2][2], column[2]) ^ g_mul(matrix[2][3], column[3])
        state[i * 4 + 3] = g_mul(matrix[3][0], column[0]) ^ g_mul(matrix[3][1],
                                                                  column[1]) ^ g_mul(matrix[3][2], column[2]) ^ g_mul(matrix[3][3], column[3])
    return state


def rot_word(word):
    return word[1:] + word[:1]


def sub_bytes(state):
    return [s_box[b] for b in state]


def inv_sub_bytes(state):
    return [inv_s_box[b] for b in state]


def log_round_keys(expanded_key: bytes, rounds: int):
    for i in range(rounds):
        logging.debug(
            f'Round key {i}: {bytes_to_hex_string(expanded_key[i*16: i*16+16])}')


def expand_key(key, rounds):
    expanded_key = []
    expanded_key += key

    for i in range(4, 4 * rounds):
        temp = expanded_key[-4:]
        if i % 4 == 0:
            temp = rot_word(temp)
            temp = sub_bytes(temp)
            temp[0] ^= r_con[(i // 4) - 1]

        for j in range(4):
            temp[j] ^= expanded_key[-16 + j]

        expanded_key += temp

    log_round_keys(expanded_key, rounds)
    return expanded_key


def encrypt_block(state: bytes, expanded_key: bytes, rounds: int):
    round_key_gen = (expanded_key[i * 16: i * 16 + 16] for i in range(rounds))
    logging.debug(
        f'Round 0 - before add round key {bytes_to_hex_string(state)}')
    state = add_round_key(state, next(round_key_gen))
    logging.debug(
        f'Round 1 - after add round key {bytes_to_hex_string(state)}')
    if rounds <= 1:
        return state
    middle_rounds = rounds - 2
    for i in range(middle_rounds):
        state = sub_bytes(state)
        logging.debug(
            f'Round {i+2} - after s-box: {bytes_to_hex_string(state)}')
        state = shift_rows(state)
        logging.debug(
            f'Round {i+2} - after shift rows: {bytes_to_hex_string(state)}')
        state = mix_columns(state, mix_columns_matrix)
        logging.debug(
            f'Round {i+2} - after mix columns: {bytes_to_hex_string(state)}')
        state = add_round_key(state, next(round_key_gen))
        logging.debug(
            f'Round {i+2} - after add round key: {bytes_to_hex_string(state)}')
    state = sub_bytes(state)
    logging.debug(
        f'Round {rounds} - after s-box: {bytes_to_hex_string(state)}')
    state = shift_rows(state)
    logging.debug(
        f'Round {rounds} - after shift rows: {bytes_to_hex_string(state)}')
    state = add_round_key(state, next(round_key_gen))
    logging.debug(
        f'Round {rounds} - after add round key: {bytes_to_hex_string(state)}')
    return state


def bytes_to_hex_string(bytes: bytes):
    return ''.join(list(map(lambda x: f'{x:0>2x}', bytes)))


def pad_message(message: bytes):
    block_size = 16
    padding = block_size - len(message) % block_size
    if padding == 0:
        padding = block_size
    logging.info(f'Padding message with {padding} bytes')
    padded_message = message + bytes([padding] * padding)
    return padded_message


def unpad_message(message):
    padding = message[-1]
    return message[:-padding]


def join_blocks(states: list[list[bytes]]):
    return bytes([byte for state in states for byte in state])


def slipt_message(message, block_size=16):
    return [message[i:i+block_size] for i in range(0, len(message), block_size)]


def generate_keystreams(expanded_key: bytes, rounds: int, iv: bytes, n: int):
    keystreams = []
    logging.info(f'IV: {bytes_to_hex_string(iv)}')
    counter = int.from_bytes(iv, byteorder='big')
    for _ in range(n):
        counter_block = counter.to_bytes(16, byteorder='big')
        keystream = encrypt_block(counter_block, expanded_key, rounds)
        keystreams.append(keystream)
        counter += 1
    return keystreams


def ctr_encrypt(states, expanded_key, rounds, iv):
    blocks = []
    if iv is None:
        raise Exception('IV is required for CTR mode')
    keystreams = generate_keystreams(expanded_key, rounds, iv, len(states))
    for plain_text_block, keystream in zip(states, keystreams):
        blocks.append(
            [a ^ b for a, b in zip(plain_text_block, keystream)])
    return blocks


def encrypt(message: bytes, key: bytes, mode=Mode.ECB, iv: bytes = None, rounds=11):
    logging.info('Message: ' + bytes_to_hex_string(message))
    logging.info('Rounds: ' + str(rounds))
    logging.info('Key: ' + bytes_to_hex_string(key))
    expanded_key = expand_key(key, rounds)
    padded_message = pad_message(message)
    states = slipt_message(padded_message)
    logging.info('Number of blocks: ' + str(len(states)))
    if mode == Mode.ECB:
        encrypted_blocks = [encrypt_block(
            state, expanded_key, rounds) for state in states]
    elif mode == Mode.CTR:
        encrypted_blocks = ctr_encrypt(states, expanded_key, rounds, iv)

    encrypted_message = join_blocks(encrypted_blocks)
    logging.info('Encrypted message: ' +
                 bytes_to_hex_string(encrypted_message))
    return encrypted_message


def decrypt_block(state: bytes, expanded_key: bytes, rounds=11):
    logging.debug(
        f'Round 0 - before add round key {bytes_to_hex_string(state)}')
    round_key_gen = (expanded_key[i * 16: i * 16 + 16]
                     for i in range(rounds - 1, -1, -1))
    state = add_round_key(state, next(round_key_gen))
    logging.debug(
        f'Round 1 - after add round key {bytes_to_hex_string(state)}')
    if rounds <= 1:
        return state
    middle_rounds = rounds - 2
    for i in range(middle_rounds):
        state = inv_shift_rows(state)
        logging.debug(
            f'Round {i+2} - after inv shift rows: {bytes_to_hex_string(state)}')
        state = inv_sub_bytes(state)
        logging.debug(
            f'Round {i+2} - after inv s-box: {bytes_to_hex_string(state)}')
        state = add_round_key(state, next(round_key_gen))
        logging.debug(
            f'Round {i+2} - after add round key: {bytes_to_hex_string(state)}')
        state = mix_columns(state, inv_mix_columns_matrix)
        logging.debug(
            f'Round {i+2} - after inv mix columns: {bytes_to_hex_string(state)}')
    state = inv_shift_rows(state)
    logging.debug(
        f'Round {rounds} - after inv shift rows: {bytes_to_hex_string(state)}')
    state = inv_sub_bytes(state)
    logging.debug(
        f'Round {rounds} - after inv s-box: {bytes_to_hex_string(state)}')
    state = add_round_key(state, next(round_key_gen))
    logging.debug(
        f'Round {rounds} - after add round key: {bytes_to_hex_string(state)}')
    return state


def decrypt(message: bytes, key: bytes, mode=Mode.ECB, iv: bytes = None, rounds=11):
    logging.info('Message: ' + bytes_to_hex_string(message))
    logging.info('Rounds: ' + str(rounds))
    logging.info('Key: ' + bytes_to_hex_string(key))
    expanded_key = expand_key(key, rounds)
    states = slipt_message(message)
    logging.info('Number of blocks: ' + str(len(states)))

    if mode == Mode.ECB:
        decrypted_blocks = [decrypt_block(
            state, expanded_key, rounds) for state in states]
    elif mode == Mode.CTR:
        decrypted_blocks = ctr_encrypt(states, expanded_key, rounds, iv)

    decrypted_message = join_blocks(decrypted_blocks)
    decrypted_message = unpad_message(decrypted_message)
    logging.info('Decrypted message: ' +
                 bytes_to_hex_string(decrypted_message))
    return decrypted_message


def fit_string(string: str, length: int):
    if len(string) < length:
        logging.info(
            'hex string is too short, padding with zero bytes to length')
        return string.rjust(length, '0')

    if len(string) > length:
        logging.info(
            'hex string is too long, ignoring excess')
        return string[:length]

    return string


if __name__ == '__main__':
    parser = ArgumentParser()
    parser.add_argument('-in', '--input_file', type=str, required=True)
    parser.add_argument('-out', '--output_file', type=str, required=True)
    parser.add_argument(
        '-e', '--encrypt', action='store_true', dest='encrypt_flag')
    parser.add_argument(
        '-d', '--decrypt', action='store_true', dest='decrypt_flag')
    parser.add_argument('-k', '--key', type=str, required=True)
    parser.add_argument('-iv', type=str)
    parser.add_argument('-r', '--rounds', type=int, default=11)
    parser.add_argument('-m', '--mode', type=str, choices=[
                        Mode.ECB.name, Mode.CTR.name], default=Mode.ECB.name)
    parser.add_argument(
        '-v', '--verbose', action='store_true', dest='verbose_flag')
    args = parser.parse_args()

    verbose_flag = args.verbose_flag
    logging.basicConfig(level=logging.DEBUG if verbose_flag else logging.INFO)
    input_file = args.input_file
    output_file = args.output_file
    encrypt_flag = args.encrypt_flag
    decrypt_flag = args.decrypt_flag
    key = bytes.fromhex(fit_string(args.key, 32))
    iv = bytes.fromhex(fit_string(args.iv, 32)) if args.iv else None
    rounds = args.rounds
    mode = args.mode

    if encrypt_flag or decrypt_flag:
        with open(input_file, 'rb') as f:
            message = f.read()

            if encrypt_flag:
                output_data = encrypt(message, key,
                                      Mode[mode], iv, rounds)
            else:
                output_data = decrypt(message, key,
                                      Mode[mode], iv, rounds)

            with open(output_file, 'wb') as f:
                f.write(output_data)
